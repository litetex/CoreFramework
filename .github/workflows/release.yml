name: Release

on:
  push:
    branches: 
      - 'master'
      - 'master-release-test'

jobs:
  build_all:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
      
    - name: Build
      run: dotnet build --configuration Release
      working-directory: src

  generate_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versionprovider.outputs.version }}
      package-version: ${{ steps.versionprovider.outputs.packageversion }}
    
    steps:
    - name: Generate version
      id: versionprovider
      shell: bash
      # The maximum value for either of the parts is 65534 - https://stackoverflow.com/a/37941296/11649486
      run: |
        gen_version=$(date -u +%Y.%m.%d.%k%M)
        echo "::set-output name=version::$gen_version"
        
        if [ "${{github.ref}}"="refs/heads/master-release-test" ]; then
          gen_package_version="${gen_version}-dev"
        elif [ "${{github.ref}}"="refs/heads/master" ]; then
          gen_package_version="${gen_version}"
        fi

        echo "::set-output name=packageversion::$gen_package_version"
  
  generate_release:
    runs-on: ubuntu-latest
    needs: [build_all, generate_version]
    outputs:
      upload_url: ${{ steps.create_draft.outputs.upload_url }}
    
    steps:
    - id: genoptions
      run: |
        if [ "${{github.ref}}"="refs/heads/master-release-test" ]; then
          draft=false
          prerelease=true
        elif [ "${{github.ref}}"="refs/heads/master" ]; then
          draft=true
          prerelease=false
        fi
        
        echo "::set-output name=prerelease::$prerelease"
        echo "::set-output name=draft::$draft"
      
    - name: Create Release (draft)
      id: create_draft
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.generate_version.outputs.version }}
        release_name: v${{ needs.generate_version.outputs.version }}
        body: |
          ## Nuget-Downloads
          | Module | Nuget | 
          | ------ | -------------- | 
          | Base | [![Nuget](https://img.shields.io/badge/nuget-${{ needs.generate_version.outputs.version }}-informational)](https://www.nuget.org/packages/Litetex.CoreFramework.Base/${{ needs.generate_version.outputs.package-version }})|
          | Config | [![Nuget](https://img.shields.io/badge/nuget-${{ needs.generate_version.outputs.version }}-informational)](https://www.nuget.org/packages/Litetex.CoreFramework.Config/${{ needs.generate_version.outputs.package-version }})|
          | Config.Json | [![Nuget](https://img.shields.io/badge/nuget-${{ needs.generate_version.outputs.version }}-informational)](https://www.nuget.org/packages/Litetex.CoreFramework.Config.Json/${{ needs.generate_version.outputs.package-version }})| 
          | Config.Yaml | [![Nuget](https://img.shields.io/badge/nuget-${{ needs.generate_version.outputs.version }}-informational)](https://www.nuget.org/packages/Litetex.CoreFramework.Config.Yaml/${{ needs.generate_version.outputs.package-version }})| 
          | Logging | [![Nuget](https://img.shields.io/badge/nuget-${{ needs.generate_version.outputs.version }}-informational)](https://www.nuget.org/packages/Litetex.CoreFramework.Logging/${{ needs.generate_version.outputs.package-version }})|
          | CrashLogging | [![Nuget](https://img.shields.io/badge/nuget-${{ needs.generate_version.outputs.version }}-informational)](https://www.nuget.org/packages/Litetex.CoreFramework.CrashLogging/${{ needs.generate_version.outputs.package-version }})|
        draft: ${{ steps.genoptions.outputs.draft }}
        prerelease: ${{ steps.genoptions.outputs.prerelease }}
  
  build_each:
    runs-on: ubuntu-latest
    needs: [generate_version, generate_release]
    
    strategy:
      fail-fast: true
      matrix:
        project: 
        - "CoreFramework.Base"
        - "CoreFramework.Config"
        - "CoreFramework.Config.Json" 
        - "CoreFramework.Config.Yaml" 
        - "CoreFramework.CrashLogging"
        - "CoreFramework.Logging"
    
    steps:    
    - uses: actions/checkout@v2
      
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
        
    - name: Pack
      working-directory: src/${{ matrix.project }}
      run: |
        dotnet pack --configuration Release -p:PackageVersion=${{ needs.generate_version.outputs.package-version }} -p:AssemblyVersion=${{ needs.generate_version.outputs.version }} -p:PathMap="$GITHUB_WORKSPACE=/" -p:ContinuousIntegrationBuild=true
            
    - name: Find nupkg file
      id: nupkgvar
      working-directory: src/${{ matrix.project }}/bin/Release
      run: files=( *.nupkg) && echo ::set-output name=filename::$(echo "${files[0]}")
      
    - name: Upload nupkg - Upload asset
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.nupkgvar.outputs.filename }}
        path: src/${{ matrix.project }}/bin/Release/${{ steps.nupkgvar.outputs.filename }}
        
    - name: Find snupkg file
      id: snupkgvar
      working-directory: src/${{ matrix.project }}/bin/Release
      run: files=( *.snupkg) && echo ::set-output name=filename::$(echo "${files[0]}")
      
    - name: Upload snupkg - Upload asset
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.snupkgvar.outputs.filename }}
        path: src/${{ matrix.project }}/bin/Release/${{ steps.snupkgvar.outputs.filename }}

    - name: Release - Upload nupkg
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.generate_release.outputs.upload_url }} 
        asset_path: src/${{ matrix.project }}/bin/Release/${{ steps.nupkgvar.outputs.filename }}
        asset_name: ${{ steps.nupkgvar.outputs.filename }}
        asset_content_type: application/octet-stream
        
    - name: Release - Upload snupkg
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.generate_release.outputs.upload_url }} 
        asset_path: src/${{ matrix.project }}/bin/Release/${{ steps.snupkgvar.outputs.filename }}
        asset_name: ${{ steps.snupkgvar.outputs.filename }}
        asset_content_type: application/octet-stream

    - name: Release - Upload nupkg (includes snupkg) to nuget.org
      working-directory: src/${{ matrix.project }}/bin/Release
      run: dotnet nuget push ${{ steps.nupkgvar.outputs.filename }} -k ${{ secrets.NUGET_KEY }} -s https://api.nuget.org/v3/index.json
